/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.samiksaha.infa.automateds2t;

import java.awt.Component;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.samiksaha.infa.automateds2t.Mapping.TargetInstance;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import javax.swing.Action;

/**
 * 
 * @author Samik
 */
public class MainWindow extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	NodeList mappingNodeList;
	HashMap<String, Node> mappingNodeNamedList;
	static HashMap<String, Mapping> mappingObjectList;
	DefaultListModel<String> mappingListModel;
	DefaultListModel<String> targetInstanceListModel;
	ArrayList<String> mappingList;
	static Document xmlDocument;
	XPath xPath;
	ExcelOutput xlOutput;
	private ProgressWindow progressWindow;
	Mapping mapping;
	Logger logger;
	S2TGenerator s2tGenerator;

	/**
	 * Creates new form MainWindow
	 */
	public MainWindow() {
		logger = Logger.getLogger(MainWindow.class.getName());
		this.mappingList = new ArrayList<String>();
		this.mappingListModel = new DefaultListModel<String>();
		MainWindow.mappingObjectList = new HashMap<String, Mapping>();
		this.mappingNodeNamedList = new HashMap<String, Node>();
		this.targetInstanceListModel = new DefaultListModel<String>();
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException
				| IllegalAccessException ex) {
			Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
		}
		initComponents();

		searchBox.getDocument().addDocumentListener(new SearchBoxDocumentListener());
		jSplitPane1.setVisible(false);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jSplitPane1 = new javax.swing.JSplitPane();
		jPanel1 = new javax.swing.JPanel();
		searchBox = new javax.swing.JTextField();
		jScrollPane2 = new javax.swing.JScrollPane();
		mappingJList = new JList<String>();
		jSplitPane2 = new javax.swing.JSplitPane();
		jTabbedPane1 = new javax.swing.JTabbedPane();
		jScrollPane1 = new javax.swing.JScrollPane();
		targetInstanceJList = new JList<String>();
		targetInstanceJList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent arg0) {
				
			}
		});
		targetInstanceJList.setToolTipText("Select target instances to be included in the S2T");
		mappingInfoPanel = new javax.swing.JPanel();
		jLabel2 = new javax.swing.JLabel();
		jToolBar1 = new javax.swing.JToolBar();
		jToolBar1.setFloatable(false);
		btnFileOpen = new javax.swing.JButton();
		btnFileOpen.setToolTipText("Open Informatica export");
		btnGenerateS2T = new javax.swing.JButton();
		btnGenerateS2T.setToolTipText("Generate S2T");
		jToolBar2 = new javax.swing.JToolBar();
		jToolBar2.setPreferredSize(new Dimension(13, 20));
		statusMessage = new javax.swing.JLabel();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		menuItemFileOpen = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		jMenu4 = new javax.swing.JMenu();
		jMenu5 = new javax.swing.JMenu();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Informatica S2T Generator");
		setLocationByPlatform(true);

		jSplitPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
		jSplitPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

		mappingJList.setModel(mappingListModel);
		mappingJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
			public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
				mappingJListValueChanged(evt);
			}
		});
		jScrollPane2.setViewportView(mappingJList);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(5, 5, 5)
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(searchBox, javax.swing.GroupLayout.Alignment.TRAILING).addComponent(
										jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(5, 5, 5)
						.addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(5, 5, 5)
						.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
						.addGap(5, 5, 5)));

		jSplitPane1.setLeftComponent(jPanel1);

		jSplitPane2.setBorder(null);
		jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

		//targetInstanceJList.setCellRenderer(new CheckboxListCellRenderer());
		targetInstanceJList.setModel(targetInstanceListModel);
		jScrollPane1.setViewportView(targetInstanceJList);

		jTabbedPane1.addTab("Target Instances", jScrollPane1);

		jSplitPane2.setBottomComponent(jTabbedPane1);

		mappingInfoPanel.setPreferredSize(new java.awt.Dimension(233, 166));
		mappingInfoPanel.setLayout(new BoxLayout(mappingInfoPanel, BoxLayout.PAGE_AXIS));
		mappingInfoPanel.add(jLabel2);

		jSplitPane2.setLeftComponent(mappingInfoPanel);

		jSplitPane1.setRightComponent(jSplitPane2);

		getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

		jToolBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
		jToolBar1.setRollover(true);

		btnFileOpen.setIcon(new javax.swing.ImageIcon(
				getClass().getResource("/com/samiksaha/infa/automateds2t/res/open24x24.png"))); // NOI18N
		btnFileOpen.setBorderPainted(false);
		btnFileOpen.setFocusable(false);
		btnFileOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		btnFileOpen.setPreferredSize(new java.awt.Dimension(35, 31));
		btnFileOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		btnFileOpen.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnFileOpenActionPerformed(evt);
			}
		});
		jToolBar1.add(btnFileOpen);

		btnGenerateS2T.setIcon(new javax.swing.ImageIcon(
				getClass().getResource("/com/samiksaha/infa/automateds2t/res/excel_doc24x24.png"))); // NOI18N
		btnGenerateS2T.setFocusable(false);
		btnGenerateS2T.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		btnGenerateS2T.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		btnGenerateS2T.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnGenerateS2TActionPerformed(evt);
			}
		});
		jToolBar1.add(btnGenerateS2T);

		getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

		jToolBar2.setBorder(null);
		jToolBar2.setFloatable(false);

		rigidArea = Box.createRigidArea(new Dimension(7, 20));
		jToolBar2.add(rigidArea);

		statusMessage.setText("Done");
		jToolBar2.add(statusMessage);

		getContentPane().add(jToolBar2, java.awt.BorderLayout.PAGE_END);

		jMenuBar1.setBorder(null);

		jMenu1.setText("File");

		menuItemFileOpen.setAccelerator(
				javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
		menuItemFileOpen.setText("Open XML File...");
		menuItemFileOpen.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuItemFileOpenActionPerformed(evt);
			}
		});
		jMenu1.add(menuItemFileOpen);

		jMenuBar1.add(jMenu1);

		mntmExit = new JMenuItem("Exit");
		mntmExit.setAction(action);
		jMenu1.add(mntmExit);

		jMenu2.setText("Edit");
		jMenuBar1.add(jMenu2);

		mntmCopy = new JMenuItem("Copy");
		jMenu2.add(mntmCopy);

		jMenu4.setText("Tools");
		jMenuBar1.add(jMenu4);

		mntmGenerateSt = new JMenuItem("Generate S2T");
		jMenu4.add(mntmGenerateSt);

		mntmOptions = new JMenuItem("Options");
		jMenu4.add(mntmOptions);

		jMenu5.setText("Help");
		jMenuBar1.add(jMenu5);

		mntmAbout = new JMenuItem("About");
		jMenu5.add(mntmAbout);

		setJMenuBar(jMenuBar1);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void menuItemFileOpenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_menuItemFileOpenActionPerformed
		btnFileOpenActionPerformed(evt);
	}// GEN-LAST:event_menuItemFileOpenActionPerformed

	private void mappingJListValueChanged(javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_mappingJListValueChanged
		if (!evt.getValueIsAdjusting())
			if (!mappingJList.isSelectionEmpty() && mappingJList.getSelectedIndices().length == 1) {
				String mappingName = mappingJList.getSelectedValue().toString();
				//Mapping mapping;
				if (mappingObjectList.containsKey(mappingName)) {
					mapping = (Mapping) mappingObjectList.get(mappingName);
					showMappingDetails(mapping);
				} else {
					mapping = new Mapping(this, mappingNodeNamedList.get(mappingName));
					statusMessage.setText("Loading mapping details...");
					mappingInfoPanel.removeAll();
					targetInstanceListModel.clear();
					mappingInfoPanel.updateUI();
					mappingObjectList.put(mappingName, mapping);
					new Thread(new Runnable() {
						public void run() {
							mapping.loadMappingDetails();
							showMappingDetails(mapping);
							statusMessage.setText("Done");
						}
					}).start();
				}
			}
			else{//None or multiple items selected
				mappingInfoPanel.removeAll();
				targetInstanceListModel.clear();
				repaint();
			}

	}// GEN-LAST:event_mappingJListValueChanged

	/**
	 * Show mapping description, target instance list for the mapping.
	 * Call loadMappingDetails on the mapping before calling this method.
	 * 
	 * @param mapping
	 */
	private void showMappingDetails(Mapping mapping) {
		String description = mapping.getDescription();
		int trfCount = mapping.getTransformationCount();
		String targetTables = mapping.getTargetTableNames().toString();

		JLabel descriptionLabel = new JLabel(
				description.trim().isEmpty() ? "" : "<html><p><b>Description</b>: " + description + "</p></html>");
		JLabel targetTablesLabel = new JLabel("<html><b>Targets</b>: " + targetTables + "</html>");
		JLabel trfCountLabel = new JLabel("<html><b>Number of Transformations</b>: " + trfCount + "<html>");

		mappingInfoPanel.removeAll();
		mappingInfoPanel.add(descriptionLabel);
		mappingInfoPanel.add(targetTablesLabel);
		mappingInfoPanel.add(trfCountLabel);
		mappingInfoPanel.updateUI();

		ArrayList<TargetInstance> targetInstances = mapping.getTargetInstanceList();

		targetInstanceListModel.clear();
		ListIterator<TargetInstance> targetInstanceIterator = targetInstances.listIterator();
		while (targetInstanceIterator.hasNext()) {
			targetInstanceListModel.addElement(targetInstanceIterator.next().name);
		}

	}

	private void btnFileOpenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnFileOpenActionPerformed
		final JFileChooser fc = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter("XML Files", "xml");
		fc.setFileFilter(filter);

		int returnVal = fc.showOpenDialog(this);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			try {
				DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
				builderFactory.setValidating(false);
				builderFactory.setFeature("http://xml.org/sax/features/namespaces", false);
				builderFactory.setFeature("http://xml.org/sax/features/validation", false);
				builderFactory.setFeature("http://apache.org/xml/features/nonvalidating/load-dtd-grammar", false);
				builderFactory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);

				DocumentBuilder builder = builderFactory.newDocumentBuilder();
				xmlDocument = builder.parse(file);
				xPath = XPathFactory.newInstance().newXPath();

				mappingNodeList = xmlDocument.getElementsByTagName("MAPPING");

				System.out.println("list of mapping nodes returned");
				mappingObjectList.clear();

				mappingNodeNamedList.clear();
				for (int i = 0; i < mappingNodeList.getLength(); i++) {
					String mappingName = mappingNodeList.item(i).getAttributes().getNamedItem("NAME").getNodeValue();
					mappingNodeNamedList.put(mappingName, mappingNodeList.item(i));
				}

				//Clear and reload mapping list on the UI
				mappingList.clear();
				mappingList.addAll(mappingNodeNamedList.keySet());

				updateMappingList();

				// Clear Target Instance
				targetInstanceListModel.clear();
				// Clear mapping info panel
				mappingInfoPanel.removeAll();
				jSplitPane1.setVisible(true);

			} catch (IOException | SAXException | ParserConfigurationException e) {
				e.printStackTrace();
			}
		}
	}// GEN-LAST:event_btnFileOpenActionPerformed

	private void btnGenerateS2TActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnGenerateS2TActionPerformed
		if (!mappingJList.isSelectionEmpty()) {//Check if selection is non empty
			ArrayList<String> selectedMappings =  (ArrayList<String>) mappingJList.getSelectedValuesList();

			if (!targetInstanceJList.isSelectionEmpty())
				mapping.setTargetInstancesForS2T((ArrayList<String>) targetInstanceJList.getSelectedValuesList());

			final JFileChooser fc = new JFileChooser();
			if (selectedMappings.size() == 1){
				String mappingName = selectedMappings.get(0);
				fc.setSelectedFile(new File(mappingName + ".xlsx"));
			}
			
			FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel files", "xlsx");
			fc.setFileFilter(filter);
			fc.setAcceptAllFileFilterUsed(false);
			int returnVal = fc.showSaveDialog(this);

			if (returnVal == JFileChooser.APPROVE_OPTION) {
				try {
					File file = fc.getSelectedFile();

					FileOutputStream fos = new FileOutputStream(file);
					fos.close();
					xlOutput = new ExcelOutput(file);

					s2tGenerator = new S2TGenerator(this, selectedMappings, xlOutput);

					progressWindow = new ProgressWindow();

					s2tGenerator.addPropertyChangeListener(new PropertyChangeListener() {
						@Override
						public void propertyChange(PropertyChangeEvent evt) {
							if ("progress" == evt.getPropertyName()) {
								int progress = (Integer) evt.getNewValue();
								progressWindow.setProgress(progress);
								String message = String.format("Completed %d%%.\n", progress);
								progressWindow.setNote(message);
								if (progressWindow.isCanceled() || s2tGenerator.isDone()) {
									if (progressWindow.isCanceled()) {
										logger.log(Level.INFO, "User cancelled S2T generation.");
										s2tGenerator.cancel(true);
									} else {
										logger.log(Level.INFO, "S2T generation complete!");
										progressWindow.dispose();
									}
								}
							}

						}
					});
					disableUserInteraction();
					s2tGenerator.execute();
					progressWindow.setLocationRelativeTo(this);
					progressWindow.setVisible(true);
				} catch (FileNotFoundException e) {
					JOptionPane.showMessageDialog(this,
							"Cannot access the selected file! Please check the file is accessible and not used by another process.");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		} else {
			JOptionPane.showMessageDialog(this, "Please select a mapping");
		}

	}// GEN-LAST:event_btnGenerateS2TActionPerformed

	class SearchBoxDocumentListener implements DocumentListener {

		String newline = "\n";

		@Override
		public void insertUpdate(DocumentEvent e) {
			updateMappingList();
		}

		@Override
		public void removeUpdate(DocumentEvent e) {
			updateMappingList();
		}

		@Override
		public void changedUpdate(DocumentEvent e) {
			// Plain text components do not fire these events
		}
	}

	public void updateMappingList() {
		String srchStr = searchBox.getText();

		mappingListModel.clear();
		ListIterator<String> mappingListIterator = mappingList.listIterator();
		while (mappingListIterator.hasNext()) {
			String mappingName = (String) mappingListIterator.next();
			if (mappingName.toUpperCase().contains(srchStr.toUpperCase())) {
				mappingListModel.addElement(mappingName);
			}
		}

	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new MainWindow().setVisible(true);
			}
		});
	}

	public void disableUserInteraction() {
		Component[] components = jMenuBar1.getComponents();
		for (int i = 0; i < components.length; i++) {
			components[i].setEnabled(false);
		}

		components = jToolBar1.getComponents();
		for (int i = 0; i < components.length; i++) {
			components[i].setEnabled(false);
		}
		searchBox.setEnabled(false);
	}

	public void enableUserInteraction() {
		Component[] components = jMenuBar1.getComponents();
		for (int i = 0; i < components.length; i++) {
			components[i].setEnabled(true);
		}

		components = jToolBar1.getComponents();
		for (int i = 0; i < components.length; i++) {
			components[i].setEnabled(true);
		}
		searchBox.setEnabled(true);
		if (progressWindow.isVisible())
			progressWindow.dispose();
	}

	public void setStatusMessage(String status) {
		statusMessage.setText(status);
	}
	
	
	

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnFileOpen;
	private javax.swing.JButton btnGenerateS2T;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenu jMenu4;
	private javax.swing.JMenu jMenu5;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JSplitPane jSplitPane2;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JToolBar jToolBar2;
	private javax.swing.JPanel mappingInfoPanel;
	private javax.swing.JList<String> mappingJList;
	private javax.swing.JMenuItem menuItemFileOpen;
	private javax.swing.JTextField searchBox;
	private javax.swing.JLabel statusMessage;
	private javax.swing.JList<String> targetInstanceJList;
	private JMenuItem mntmOptions;
	private JMenuItem mntmExit;
	private JMenuItem mntmGenerateSt;
	private JMenuItem mntmAbout;
	private JMenuItem mntmCopy;
	private Component rigidArea;
	private final Action action = new SwingAction();
	private class SwingAction extends AbstractAction {
		public SwingAction() {
			putValue(NAME, "Exit");
			putValue(SHORT_DESCRIPTION, "Close the application");
		}
		public void actionPerformed(ActionEvent e) {
			dispose();
		}
	}
}
